- set_fact:
    bind_zones_play: '{{ bind_zones_play|default([]) + [ item ] }}'
  with_dict: '{{ bind_zones }}'
  when: (item.value.state is not defined or item.value.state != 'absent') and (bind_zones_subset is not defined or item.key in bind_zones_subset)

- name: create zone folder
  file:
    path: "{{ jail_home.stdout }}/usr/local/etc/namedb/zones/{{ item.key }}"
    owner: bind
    group: bind
    mode: 0755
    state: directory
  with_items: '{{ bind_zones_play }}'

- name: copy zone files
  template:
    src: db.j2
    dest: "{{ jail_home.stdout }}/usr/local/etc/namedb/zones/{{ item.key }}/db"
    owner: root
    group: wheel
    mode: 0644
  with_items: '{{ bind_zones_play }}'
  register: zone
  notify: Reload jail s named


- name: dnssec sign
  shell: 'iocage exec {{ jail_name }} dnssec-signzone -2 $(head -n 1000 /dev/urandom | sha1 | cut -b 1-16) -A -N INCREMENT -o {{ item.item.key }} -t { jail_home.stdout }}/usr/local/etc/namedb/zones/{{ item.item.key }}/db'
  args:
    chdir: "{{ jail_home.stdout }}/usr/local/etc/namedb/keys"
  with_items: '{{ zone.results }}'
  when: item.changed and item.item.key in bind_dnssec
  notify: Reload jail s named

- name: get zones files
  find:
    path: "{{ jail_home.stdout }}/usr/local/etc/namedb/zones"
    file_type: directory
    recurse: no
  register: zone_folders

- name: delete old zone file
  file:
    path: '{{ item.path }}'
    state: absent
  with_items: '{{ zone_folders.files }}'
  when: item.path|basename not in bind_zones or ('state' in bind_zones[item.path|basename] and bind_zones[item.path|basename].state == 'absent')

